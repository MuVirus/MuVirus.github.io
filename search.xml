<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Pikachu靶场————暴力破解</title>
    <url>/posts/61262.html</url>
    <content><![CDATA[<p>使用到的工具：</p>
<p>BurpSuite</p>
<h1 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h1><p>通过提示，我们知道答案</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738027607189-bd41dc16-a8cc-4c52-9139-d52b86a612d7.png"></p>
<p>我们使用 burpsuite 进行暴力破解</p>
<p>使用步骤</p>
<ol>
<li>拦截网页（intercept）</li>
<li>发送到 Intruder</li>
<li>在 Intruder 给用户名密码标注，在 Payloads 设定密码库</li>
<li>然后进行攻击(attack)</li>
</ol>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738027869685-c1b8d3f5-f9e3-4721-908b-c9ed6cbcf3b7.png"></p>
<p>可以看到 admin&#x2F;123456 和 test&#x2F;abc123 接收的长度为 33，相比较于下面 56 的比较小，不过上面是属实不知道乍回事。</p>
<h1 id="验证码绕过（on-server）"><a href="#验证码绕过（on-server）" class="headerlink" title="验证码绕过（on server）"></a>验证码绕过（on server）</h1><p>提示： 验证码好像一直有效  </p>
<p>不过我试了一下，在网页直接用原来的验证码不行，所以还是得用 burpsuite 进行拦截。</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738028136596-0767d937-36d4-4b6d-ab53-2f233797f190.png"></p>
<p>只需要对这两个进行攻击即可。</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738028391224-1fd72c3a-8949-4583-a568-78d605354a6e.png"></p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738028409556-86e33eaa-3cc7-4f6d-9bd6-e23a6f8aaf32.png"></p>
<h1 id="验证码绕过（on-client）"><a href="#验证码绕过（on-client）" class="headerlink" title="验证码绕过（on client）"></a>验证码绕过（on client）</h1><p>这里说是客户端的，就是前端的，那就可以在浏览器上进行修改了，很容易就查到了相关的 js 函数。</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738028584704-5796f23a-18d6-417b-9c09-df7cd17088f6.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> code; <span class="comment">//在全局 定义验证码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> codeLength = <span class="number">5</span>;<span class="comment">//验证码的长度</span></span><br><span class="line">  <span class="keyword">var</span> checkCode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkCode&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> selectChar = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>);<span class="comment">//所有候选组成验证码的字符，当然也可以用中文的</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> charIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">36</span>);</span><br><span class="line">    code += selectChar[charIndex];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//alert(code);</span></span><br><span class="line">  <span class="keyword">if</span> (checkCode) &#123;</span><br><span class="line">    checkCode.<span class="property">className</span> = <span class="string">&quot;code&quot;</span>;</span><br><span class="line">    checkCode.<span class="property">value</span> = code;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> inputCode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#bf_client .vcode&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">if</span> (inputCode.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请输入验证码！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputCode != code) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;验证码输入错误！&quot;</span>);</span><br><span class="line">    <span class="title function_">createCode</span>();<span class="comment">//刷新验证码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">createCode</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在浏览器上将这里面的 createCode 函数只写一个 return true;即可，然后填上信息，让 burpsuite 来拦截。</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738029139419-1cdd8aca-6da5-4008-be04-1820b582f36a.png"></p>
<h1 id="token-防爆破？"><a href="#token-防爆破？" class="headerlink" title="token 防爆破？"></a>token 防爆破？</h1><p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738030434932-9d57aa47-e9a5-481b-82e1-4070dd830631.png"></p>
<p>在浏览器定位 Login 按钮，发现上方还有这个隐藏（hidden）的输入消息，这里面的 value 值每次刷新都会改变，没看到 js 的代码，应该是服务器自己给的。</p>
<p>我们通过 burpsuite 拦截一下。</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738030588852-0e5a3b09-62b3-46c1-9464-4028bcba1f56.png"></p>
<p>根据其他教程的方法，都是只给 password 和 token 加上$号，是因为我们每次并发量是 1，所以每次发送一个导致速度上不来，所以就不考虑 username 了。（我们这里也一样）</p>
<p>攻击类型(Attack type)选择 pitchfork。</p>
<p>给 password 设置为 simple list，给上我们的爆破密码库。</p>
<p>给 token 设置为 recursive grep（循环查找字符串）（可以用于每次重新获取网站的某个字符串）</p>
<p>在 Setting 界面（老版本应该是 Option 界面）中的 redirections（重定向）中设置 always（总是）。</p>
<p>然后再 Setting 界面的 grep(查找字符串) - Extract 点击 Add</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738032166719-6f267018-f6c5-45c5-82f3-4959e02f2083.png"></p>
<p>就可以对重定向文本进行定位了。</p>
<p>最后我们将我们的并发数（concurrent）的最大值设置为 1，每次只发一条请求。</p>
<p>进行攻击</p>
<p><img src="/../../img/docs/pikachu/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1738031279722-371c1a59-8575-4e0b-8645-c5df9c544273.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Burpsuite 使用到的功能</p>
<ol>
<li>通过 Cluster Bomb 进行账户密码的爆破</li>
<li>对验证码不变（不进行销毁）的登录框进行 js 修改（client），最后爆破。</li>
<li>对需要 token 验证的登录框，进行 Pitchfork 进行重定向文本爆破。</li>
</ol>
]]></content>
      <categories>
        <category>网安</category>
        <category>靶场</category>
        <category>Pikachu</category>
      </categories>
      <tags>
        <tag>网安</tag>
      </tags>
  </entry>
</search>
